"""Add universal download and live TV columns

Revision ID: 7c76d64526a7
Revises: 5805136a1d16
Create Date: 2025-07-14 14:53:51.083256

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "7c76d64526a7"
down_revision = "5805136a1d16"
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    inspector = sa.inspect(connection)

    # Get existing columns
    media_server_columns = [
        col["name"] for col in inspector.get_columns("media_server")
    ]
    invitation_columns = [col["name"] for col in inspector.get_columns("invitation")]

    # Add new universal columns
    with op.batch_alter_table("invitation", schema=None) as batch_op:
        batch_op.add_column(sa.Column("allow_downloads", sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column("allow_live_tv", sa.Boolean(), nullable=True))

    with op.batch_alter_table("media_server", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "allow_downloads",
                sa.Boolean(),
                nullable=False,
                server_default=sa.false(),
            )
        )
        batch_op.add_column(
            sa.Column(
                "allow_live_tv", sa.Boolean(), nullable=False, server_default=sa.false()
            )
        )

    # Migrate data from old columns to new universal columns
    # For media_server table - build dynamic SQL based on existing columns
    downloads_cases = []
    livetv_cases = []

    if "allow_downloads_plex" in media_server_columns:
        downloads_cases.append(
            "WHEN server_type = 'plex' THEN COALESCE(allow_downloads_plex, 0)"
        )
    if "allow_downloads_jellyfin" in media_server_columns:
        downloads_cases.append(
            "WHEN server_type = 'jellyfin' THEN COALESCE(allow_downloads_jellyfin, 0)"
        )
    if "allow_downloads_emby" in media_server_columns:
        downloads_cases.append(
            "WHEN server_type = 'emby' THEN COALESCE(allow_downloads_emby, 0)"
        )

    if "allow_tv_plex" in media_server_columns:
        livetv_cases.append("WHEN server_type = 'plex' THEN COALESCE(allow_tv_plex, 0)")
    if "allow_tv_jellyfin" in media_server_columns:
        livetv_cases.append(
            "WHEN server_type = 'jellyfin' THEN COALESCE(allow_tv_jellyfin, 0)"
        )
    if "allow_tv_emby" in media_server_columns:
        livetv_cases.append("WHEN server_type = 'emby' THEN COALESCE(allow_tv_emby, 0)")

    if downloads_cases or livetv_cases:
        downloads_sql = (
            f"CASE {' '.join(downloads_cases)} ELSE 0 END" if downloads_cases else "0"
        )
        livetv_sql = (
            f"CASE {' '.join(livetv_cases)} ELSE 0 END" if livetv_cases else "0"
        )

        connection.execute(
            sa.text(f"""
            UPDATE media_server SET
                allow_downloads = {downloads_sql},
                allow_live_tv = {livetv_sql}
        """)
        )

    # For invitation table - build dynamic SQL based on existing columns
    downloads_coalesce = []
    livetv_coalesce = []

    if "jellyfin_allow_downloads" in invitation_columns:
        downloads_coalesce.append("jellyfin_allow_downloads")
    if "emby_allow_downloads" in invitation_columns:
        downloads_coalesce.append("emby_allow_downloads")

    if "jellyfin_allow_live_tv" in invitation_columns:
        livetv_coalesce.append("jellyfin_allow_live_tv")
    if "emby_allow_live_tv" in invitation_columns:
        livetv_coalesce.append("emby_allow_live_tv")

    if downloads_coalesce or livetv_coalesce:
        downloads_expr = (
            f"COALESCE({', '.join(downloads_coalesce)}, 0)"
            if downloads_coalesce
            else "0"
        )
        livetv_expr = (
            f"COALESCE({', '.join(livetv_coalesce)}, 0)" if livetv_coalesce else "0"
        )

        connection.execute(
            sa.text(f"""
            UPDATE invitation SET
                allow_downloads = {downloads_expr},
                allow_live_tv = {livetv_expr}
        """)
        )

    # Drop old columns from media_server table
    with op.batch_alter_table("media_server", schema=None) as batch_op:
        for col in [
            "allow_downloads_plex",
            "allow_tv_plex",
            "allow_downloads_jellyfin",
            "allow_tv_jellyfin",
            "allow_downloads_emby",
            "allow_tv_emby",
        ]:
            if col in media_server_columns:
                batch_op.drop_column(col)

    # Drop old columns from invitation table
    with op.batch_alter_table("invitation", schema=None) as batch_op:
        for col in [
            "jellyfin_allow_downloads",
            "jellyfin_allow_live_tv",
            "emby_allow_downloads",
            "emby_allow_live_tv",
        ]:
            if col in invitation_columns:
                batch_op.drop_column(col)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Recreate legacy server-specific columns in media_server table (with proper defaults)
    with op.batch_alter_table("media_server", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "allow_downloads_plex",
                sa.Boolean(),
                nullable=False,
                server_default=sa.false(),
            )
        )
        batch_op.add_column(
            sa.Column(
                "allow_tv_plex", sa.Boolean(), nullable=False, server_default=sa.false()
            )
        )
        batch_op.add_column(
            sa.Column(
                "allow_downloads_jellyfin",
                sa.Boolean(),
                nullable=False,
                server_default=sa.false(),
            )
        )
        batch_op.add_column(
            sa.Column(
                "allow_tv_jellyfin",
                sa.Boolean(),
                nullable=False,
                server_default=sa.false(),
            )
        )
        batch_op.add_column(
            sa.Column(
                "allow_downloads_emby",
                sa.Boolean(),
                nullable=False,
                server_default=sa.false(),
            )
        )
        batch_op.add_column(
            sa.Column(
                "allow_tv_emby", sa.Boolean(), nullable=False, server_default=sa.false()
            )
        )

    # Recreate ALL legacy server-specific columns in invitation table
    with op.batch_alter_table("invitation", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("jellyfin_allow_downloads", sa.Boolean(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("jellyfin_allow_live_tv", sa.Boolean(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("emby_allow_downloads", sa.Boolean(), nullable=True)
        )
        batch_op.add_column(
            sa.Column("emby_allow_live_tv", sa.Boolean(), nullable=True)
        )

    # Migrate data back to legacy columns
    connection = op.get_bind()

    # For media_server table: copy universal values back to legacy columns
    connection.execute(
        sa.text("""
        UPDATE media_server SET
            allow_downloads_plex = CASE WHEN server_type = 'plex' THEN allow_downloads ELSE 0 END,
            allow_tv_plex = CASE WHEN server_type = 'plex' THEN allow_live_tv ELSE 0 END,
            allow_downloads_jellyfin = CASE WHEN server_type = 'jellyfin' THEN allow_downloads ELSE 0 END,
            allow_tv_jellyfin = CASE WHEN server_type = 'jellyfin' THEN allow_live_tv ELSE 0 END,
            allow_downloads_emby = CASE WHEN server_type = 'emby' THEN allow_downloads ELSE 0 END,
            allow_tv_emby = CASE WHEN server_type = 'emby' THEN allow_live_tv ELSE 0 END
    """)
    )

    # For invitation table: copy universal values back to legacy columns
    connection.execute(
        sa.text("""
        UPDATE invitation SET
            jellyfin_allow_downloads = allow_downloads,
            jellyfin_allow_live_tv = allow_live_tv,
            emby_allow_downloads = allow_downloads,
            emby_allow_live_tv = allow_live_tv
    """)
    )

    # Drop universal columns from media_server table
    with op.batch_alter_table("media_server", schema=None) as batch_op:
        batch_op.drop_column("allow_live_tv")
        batch_op.drop_column("allow_downloads")

    # Drop universal columns from invitation table
    with op.batch_alter_table("invitation", schema=None) as batch_op:
        batch_op.drop_column("allow_live_tv")
        batch_op.drop_column("allow_downloads")

    # ### end Alembic commands ###
